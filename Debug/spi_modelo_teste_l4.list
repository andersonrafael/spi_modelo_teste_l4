
spi_modelo_teste_l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f1c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080041b4  080041b4  000051b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080041c4  080041c4  000051c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  24000000  080041cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  24000014  080041e0  00006014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000c0  080041e0  000060c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000af62  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b77  00000000  00000000  00010fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000900  00000000  00000000  00012b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000006ae  00000000  00000000  00013420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036079  00000000  00000000  00013ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c821  00000000  00000000  00049b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00155da3  00000000  00000000  00056368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ac10b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002354  00000000  00000000  001ac150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000089  00000000  00000000  001ae4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800419c 	.word	0x0800419c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	0800419c 	.word	0x0800419c

080002d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ee:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <MX_GPIO_Init+0x84>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80002f4:	4a19      	ldr	r2, [pc, #100]	@ (800035c <MX_GPIO_Init+0x84>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80002fe:	4b17      	ldr	r3, [pc, #92]	@ (800035c <MX_GPIO_Init+0x84>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b13      	ldr	r3, [pc, #76]	@ (800035c <MX_GPIO_Init+0x84>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_GPIO_Init+0x84>)
 8000314:	f043 0302 	orr.w	r3, r3, #2
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800031c:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <MX_GPIO_Init+0x84>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000330:	480b      	ldr	r0, [pc, #44]	@ (8000360 <MX_GPIO_Init+0x88>)
 8000332:	f000 fe73 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000336:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800033a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033c:	2301      	movs	r3, #1
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000348:	f107 030c 	add.w	r3, r7, #12
 800034c:	4619      	mov	r1, r3
 800034e:	4804      	ldr	r0, [pc, #16]	@ (8000360 <MX_GPIO_Init+0x88>)
 8000350:	f000 fcb4 	bl	8000cbc <HAL_GPIO_Init>

}
 8000354:	bf00      	nop
 8000356:	3720      	adds	r7, #32
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	58024400 	.word	0x58024400
 8000360:	58020400 	.word	0x58020400

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800036a:	f000 f895 	bl	8000498 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036e:	f000 faab 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f000 f815 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000376:	f7ff ffaf 	bl	80002d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800037a:	f000 f8bf 	bl	80004fc <MX_SPI1_Init>
    /* USER CODE BEGIN 3 */

	      // 1. Recebe o sinal do mestre e envia a resposta
	      // HAL_SPI_TransmitReceive: função bloqueante
	      // O escravo espera o NSS ser ativado pelo mestre para iniciar a comunicação.
	      if (HAL_SPI_TransmitReceive(&hspi1, &tx_data, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK) // função bloqueante
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
 8000382:	9300      	str	r3, [sp, #0]
 8000384:	2301      	movs	r3, #1
 8000386:	4a03      	ldr	r2, [pc, #12]	@ (8000394 <main+0x30>)
 8000388:	4903      	ldr	r1, [pc, #12]	@ (8000398 <main+0x34>)
 800038a:	4804      	ldr	r0, [pc, #16]	@ (800039c <main+0x38>)
 800038c:	f003 fab6 	bl	80038fc <HAL_SPI_TransmitReceive>
 8000390:	e7f5      	b.n	800037e <main+0x1a>
 8000392:	bf00      	nop
 8000394:	24000030 	.word	0x24000030
 8000398:	24000000 	.word	0x24000000
 800039c:	24000034 	.word	0x24000034

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b09c      	sub	sp, #112	@ 0x70
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003aa:	224c      	movs	r2, #76	@ 0x4c
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fec7 	bl	8004142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2220      	movs	r2, #32
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f003 fec1 	bl	8004142 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003c0:	2002      	movs	r0, #2
 80003c2:	f000 fe45 	bl	8001050 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003c6:	2300      	movs	r3, #0
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	4b31      	ldr	r3, [pc, #196]	@ (8000490 <SystemClock_Config+0xf0>)
 80003cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ce:	4a30      	ldr	r2, [pc, #192]	@ (8000490 <SystemClock_Config+0xf0>)
 80003d0:	f023 0301 	bic.w	r3, r3, #1
 80003d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80003d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000490 <SystemClock_Config+0xf0>)
 80003d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000494 <SystemClock_Config+0xf4>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000494 <SystemClock_Config+0xf4>)
 80003ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b28      	ldr	r3, [pc, #160]	@ (8000494 <SystemClock_Config+0xf4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003fc:	bf00      	nop
 80003fe:	4b25      	ldr	r3, [pc, #148]	@ (8000494 <SystemClock_Config+0xf4>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800040a:	d1f8      	bne.n	80003fe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040c:	2302      	movs	r3, #2
 800040e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000410:	2301      	movs	r3, #1
 8000412:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000414:	2340      	movs	r3, #64	@ 0x40
 8000416:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2302      	movs	r3, #2
 800041a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041c:	2300      	movs	r3, #0
 800041e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000420:	2304      	movs	r3, #4
 8000422:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000424:	230a      	movs	r3, #10
 8000426:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000428:	2302      	movs	r3, #2
 800042a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800042c:	2302      	movs	r3, #2
 800042e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000430:	2302      	movs	r3, #2
 8000432:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000434:	230c      	movs	r3, #12
 8000436:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000438:	2302      	movs	r3, #2
 800043a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fe3d 	bl	80010c4 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000450:	f000 f84e 	bl	80004f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000454:	233f      	movs	r3, #63	@ 0x3f
 8000456:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000458:	2300      	movs	r3, #0
 800045a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2101      	movs	r1, #1
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fa7d 	bl	8001978 <HAL_RCC_ClockConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000484:	f000 f834 	bl	80004f0 <Error_Handler>
  }
}
 8000488:	bf00      	nop
 800048a:	3770      	adds	r7, #112	@ 0x70
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	58000400 	.word	0x58000400
 8000494:	58024800 	.word	0x58024800

08000498 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800049e:	463b      	mov	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004aa:	f000 fb8f 	bl	8000bcc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004ae:	2301      	movs	r3, #1
 80004b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80004ba:	231f      	movs	r3, #31
 80004bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80004be:	2387      	movs	r3, #135	@ 0x87
 80004c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80004c6:	2300      	movs	r3, #0
 80004c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80004ce:	2301      	movs	r3, #1
 80004d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80004da:	463b      	mov	r3, r7
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 fbad 	bl	8000c3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80004e2:	2004      	movs	r0, #4
 80004e4:	f000 fb8a 	bl	8000bfc <HAL_MPU_Enable>

}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f4:	b672      	cpsid	i
}
 80004f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <Error_Handler+0x8>

080004fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000500:	4b24      	ldr	r3, [pc, #144]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000502:	4a25      	ldr	r2, [pc, #148]	@ (8000598 <MX_SPI1_Init+0x9c>)
 8000504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000506:	4b23      	ldr	r3, [pc, #140]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800050c:	4b21      	ldr	r3, [pc, #132]	@ (8000594 <MX_SPI1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000512:	4b20      	ldr	r3, [pc, #128]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000514:	2207      	movs	r2, #7
 8000516:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000518:	4b1e      	ldr	r3, [pc, #120]	@ (8000594 <MX_SPI1_Init+0x98>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800051e:	4b1d      	ldr	r3, [pc, #116]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000524:	4b1b      	ldr	r3, [pc, #108]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800052a:	4b1a      	ldr	r3, [pc, #104]	@ (8000594 <MX_SPI1_Init+0x98>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000530:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800053c:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <MX_SPI1_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000548:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <MX_SPI1_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <MX_SPI1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000560:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000562:	2200      	movs	r2, #0
 8000564:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000568:	2200      	movs	r2, #0
 800056a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <MX_SPI1_Init+0x98>)
 800056e:	2200      	movs	r2, #0
 8000570:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000572:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000574:	2200      	movs	r2, #0
 8000576:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <MX_SPI1_Init+0x98>)
 800057a:	2200      	movs	r2, #0
 800057c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800057e:	4805      	ldr	r0, [pc, #20]	@ (8000594 <MX_SPI1_Init+0x98>)
 8000580:	f003 f898 	bl	80036b4 <HAL_SPI_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 800058a:	f7ff ffb1 	bl	80004f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	24000034 	.word	0x24000034
 8000598:	40013000 	.word	0x40013000

0800059c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0ba      	sub	sp, #232	@ 0xe8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	22c0      	movs	r2, #192	@ 0xc0
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fdc0 	bl	8004142 <memset>
  if(spiHandle->Instance==SPI1)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a26      	ldr	r2, [pc, #152]	@ (8000660 <HAL_SPI_MspInit+0xc4>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d144      	bne.n	8000656 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80005cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005d0:	f04f 0300 	mov.w	r3, #0
 80005d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80005d8:	2300      	movs	r3, #0
 80005da:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fcf9 	bl	8001fd8 <HAL_RCCEx_PeriphCLKConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80005ec:	f7ff ff80 	bl	80004f0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <HAL_SPI_MspInit+0xc8>)
 80005f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80005f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <HAL_SPI_MspInit+0xc8>)
 80005f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000600:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <HAL_SPI_MspInit+0xc8>)
 8000602:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <HAL_SPI_MspInit+0xc8>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000614:	4a13      	ldr	r2, [pc, #76]	@ (8000664 <HAL_SPI_MspInit+0xc8>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <HAL_SPI_MspInit+0xc8>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800062c:	23f0      	movs	r3, #240	@ 0xf0
 800062e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000644:	2305      	movs	r3, #5
 8000646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <HAL_SPI_MspInit+0xcc>)
 8000652:	f000 fb33 	bl	8000cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000656:	bf00      	nop
 8000658:	37e8      	adds	r7, #232	@ 0xe8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40013000 	.word	0x40013000
 8000664:	58024400 	.word	0x58024400
 8000668:	58020000 	.word	0x58020000

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <HAL_MspInit+0x30>)
 8000674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000678:	4a08      	ldr	r2, [pc, #32]	@ (800069c <HAL_MspInit+0x30>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_MspInit+0x30>)
 8000684:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	58024400 	.word	0x58024400

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <NMI_Handler+0x4>

080006a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <MemManage_Handler+0x4>

080006b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f6:	f000 f959 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000704:	4b43      	ldr	r3, [pc, #268]	@ (8000814 <SystemInit+0x114>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800070a:	4a42      	ldr	r2, [pc, #264]	@ (8000814 <SystemInit+0x114>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000714:	4b40      	ldr	r3, [pc, #256]	@ (8000818 <SystemInit+0x118>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f003 030f 	and.w	r3, r3, #15
 800071c:	2b06      	cmp	r3, #6
 800071e:	d807      	bhi.n	8000730 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000720:	4b3d      	ldr	r3, [pc, #244]	@ (8000818 <SystemInit+0x118>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f023 030f 	bic.w	r3, r3, #15
 8000728:	4a3b      	ldr	r2, [pc, #236]	@ (8000818 <SystemInit+0x118>)
 800072a:	f043 0307 	orr.w	r3, r3, #7
 800072e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000730:	4b3a      	ldr	r3, [pc, #232]	@ (800081c <SystemInit+0x11c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a39      	ldr	r2, [pc, #228]	@ (800081c <SystemInit+0x11c>)
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800073c:	4b37      	ldr	r3, [pc, #220]	@ (800081c <SystemInit+0x11c>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000742:	4b36      	ldr	r3, [pc, #216]	@ (800081c <SystemInit+0x11c>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4935      	ldr	r1, [pc, #212]	@ (800081c <SystemInit+0x11c>)
 8000748:	4b35      	ldr	r3, [pc, #212]	@ (8000820 <SystemInit+0x120>)
 800074a:	4013      	ands	r3, r2
 800074c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800074e:	4b32      	ldr	r3, [pc, #200]	@ (8000818 <SystemInit+0x118>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	2b00      	cmp	r3, #0
 8000758:	d007      	beq.n	800076a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800075a:	4b2f      	ldr	r3, [pc, #188]	@ (8000818 <SystemInit+0x118>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f023 030f 	bic.w	r3, r3, #15
 8000762:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <SystemInit+0x118>)
 8000764:	f043 0307 	orr.w	r3, r3, #7
 8000768:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800076a:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <SystemInit+0x11c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000770:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <SystemInit+0x11c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000776:	4b29      	ldr	r3, [pc, #164]	@ (800081c <SystemInit+0x11c>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800077c:	4b27      	ldr	r3, [pc, #156]	@ (800081c <SystemInit+0x11c>)
 800077e:	4a29      	ldr	r2, [pc, #164]	@ (8000824 <SystemInit+0x124>)
 8000780:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000782:	4b26      	ldr	r3, [pc, #152]	@ (800081c <SystemInit+0x11c>)
 8000784:	4a28      	ldr	r2, [pc, #160]	@ (8000828 <SystemInit+0x128>)
 8000786:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <SystemInit+0x11c>)
 800078a:	4a28      	ldr	r2, [pc, #160]	@ (800082c <SystemInit+0x12c>)
 800078c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <SystemInit+0x11c>)
 8000790:	2200      	movs	r2, #0
 8000792:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000794:	4b21      	ldr	r3, [pc, #132]	@ (800081c <SystemInit+0x11c>)
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <SystemInit+0x12c>)
 8000798:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <SystemInit+0x11c>)
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <SystemInit+0x11c>)
 80007a2:	4a22      	ldr	r2, [pc, #136]	@ (800082c <SystemInit+0x12c>)
 80007a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <SystemInit+0x11c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <SystemInit+0x11c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a1a      	ldr	r2, [pc, #104]	@ (800081c <SystemInit+0x11c>)
 80007b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80007b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <SystemInit+0x11c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <SystemInit+0x130>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <SystemInit+0x134>)
 80007c4:	4013      	ands	r3, r2
 80007c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007ca:	d202      	bcs.n	80007d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <SystemInit+0x138>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <SystemInit+0x11c>)
 80007d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d113      	bne.n	8000808 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <SystemInit+0x11c>)
 80007e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007e6:	4a0d      	ldr	r2, [pc, #52]	@ (800081c <SystemInit+0x11c>)
 80007e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <SystemInit+0x13c>)
 80007f2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007f6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <SystemInit+0x11c>)
 80007fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007fe:	4a07      	ldr	r2, [pc, #28]	@ (800081c <SystemInit+0x11c>)
 8000800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000804:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00
 8000818:	52002000 	.word	0x52002000
 800081c:	58024400 	.word	0x58024400
 8000820:	eaf6ed7f 	.word	0xeaf6ed7f
 8000824:	02020200 	.word	0x02020200
 8000828:	01ff0000 	.word	0x01ff0000
 800082c:	01010280 	.word	0x01010280
 8000830:	5c001000 	.word	0x5c001000
 8000834:	ffff0000 	.word	0xffff0000
 8000838:	51008108 	.word	0x51008108
 800083c:	52004000 	.word	0x52004000

08000840 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <ExitRun0Mode+0x2c>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	4a08      	ldr	r2, [pc, #32]	@ (800086c <ExitRun0Mode+0x2c>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000850:	bf00      	nop
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <ExitRun0Mode+0x2c>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	58024800 	.word	0x58024800

08000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000870:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80008ac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000874:	f7ff ffe4 	bl	8000840 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000878:	f7ff ff42 	bl	8000700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	@ (80008c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f003 fc57 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff fd5d 	bl	8000364 <main>
  bx  lr
 80008aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008b4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80008b8:	080041cc 	.word	0x080041cc
  ldr r2, =_sbss
 80008bc:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80008c0:	240000c0 	.word	0x240000c0

080008c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC3_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ce:	2003      	movs	r0, #3
 80008d0:	f000 f94a 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008d4:	f001 fa06 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 80008d8:	4602      	mov	r2, r0
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <HAL_Init+0x68>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	0a1b      	lsrs	r3, r3, #8
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	4913      	ldr	r1, [pc, #76]	@ (8000934 <HAL_Init+0x6c>)
 80008e6:	5ccb      	ldrb	r3, [r1, r3]
 80008e8:	f003 031f 	and.w	r3, r3, #31
 80008ec:	fa22 f303 	lsr.w	r3, r2, r3
 80008f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <HAL_Init+0x68>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_Init+0x6c>)
 80008fc:	5cd3      	ldrb	r3, [r2, r3]
 80008fe:	f003 031f 	and.w	r3, r3, #31
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	fa22 f303 	lsr.w	r3, r2, r3
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <HAL_Init+0x70>)
 800090a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800090c:	4a0b      	ldr	r2, [pc, #44]	@ (800093c <HAL_Init+0x74>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000912:	200f      	movs	r0, #15
 8000914:	f000 f814 	bl	8000940 <HAL_InitTick>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e002      	b.n	8000928 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000922:	f7ff fea3 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	58024400 	.word	0x58024400
 8000934:	080041b4 	.word	0x080041b4
 8000938:	24000008 	.word	0x24000008
 800093c:	24000004 	.word	0x24000004

08000940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_InitTick+0x60>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d101      	bne.n	8000954 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e021      	b.n	8000998 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000954:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <HAL_InitTick+0x64>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_InitTick+0x60>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f921 	bl	8000bb2 <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f8f9 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	@ (80009a8 <HAL_InitTick+0x68>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000010 	.word	0x24000010
 80009a4:	24000004 	.word	0x24000004
 80009a8:	2400000c 	.word	0x2400000c

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	24000010 	.word	0x24000010
 80009d0:	240000bc 	.word	0x240000bc

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	240000bc 	.word	0x240000bc

080009ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009f0:	4b03      	ldr	r3, [pc, #12]	@ (8000a00 <HAL_GetREVID+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	0c1b      	lsrs	r3, r3, #16
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	5c001000 	.word	0x5c001000

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <__NVIC_SetPriorityGrouping+0x40>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	@ (8000a44 <__NVIC_SetPriorityGrouping+0x40>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	05fa0000 	.word	0x05fa0000

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	@ (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	@ 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff47 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff5e 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ff90 	bl	8000abc <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff5f 	bl	8000a68 <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffb2 	bl	8000b24 <SysTick_Config>
 8000bc0:	4603      	mov	r3, r0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bd0:	f3bf 8f5f 	dmb	sy
}
 8000bd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	@ (8000bf4 <HAL_MPU_Disable+0x28>)
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bda:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <HAL_MPU_Disable+0x28>)
 8000bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000be0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_MPU_Disable+0x2c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	e000ed90 	.word	0xe000ed90

08000bfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000c04:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <HAL_MPU_Enable+0x38>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <HAL_MPU_Enable+0x3c>)
 8000c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c12:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <HAL_MPU_Enable+0x3c>)
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c18:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000c1a:	f3bf 8f4f 	dsb	sy
}
 8000c1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c20:	f3bf 8f6f 	isb	sy
}
 8000c24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed90 	.word	0xe000ed90
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	785a      	ldrb	r2, [r3, #1]
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c58:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	7b1b      	ldrb	r3, [r3, #12]
 8000c64:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7adb      	ldrb	r3, [r3, #11]
 8000c6a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7a9b      	ldrb	r3, [r3, #10]
 8000c72:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7b5b      	ldrb	r3, [r3, #13]
 8000c7a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7b9b      	ldrb	r3, [r3, #14]
 8000c82:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7bdb      	ldrb	r3, [r3, #15]
 8000c8a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7a5b      	ldrb	r3, [r3, #9]
 8000c92:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7a1b      	ldrb	r3, [r3, #8]
 8000c9a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c9c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ca6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ca8:	6113      	str	r3, [r2, #16]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed90 	.word	0xe000ed90

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000cca:	4b89      	ldr	r3, [pc, #548]	@ (8000ef0 <HAL_GPIO_Init+0x234>)
 8000ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cce:	e194      	b.n	8000ffa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 8186 	beq.w	8000ff4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d005      	beq.n	8000d00 <HAL_GPIO_Init+0x44>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d130      	bne.n	8000d62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d36:	2201      	movs	r2, #1
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	f003 0201 	and.w	r2, r3, #1
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b03      	cmp	r3, #3
 8000d6c:	d017      	beq.n	8000d9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d123      	bne.n	8000df2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	08da      	lsrs	r2, r3, #3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3208      	adds	r2, #8
 8000db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	69b9      	ldr	r1, [r7, #24]
 8000dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0203 	and.w	r2, r3, #3
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 80e0 	beq.w	8000ff4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e34:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <HAL_GPIO_Init+0x238>)
 8000e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ef4 <HAL_GPIO_Init+0x238>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <HAL_GPIO_Init+0x238>)
 8000e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e52:	4a29      	ldr	r2, [pc, #164]	@ (8000ef8 <HAL_GPIO_Init+0x23c>)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	089b      	lsrs	r3, r3, #2
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a20      	ldr	r2, [pc, #128]	@ (8000efc <HAL_GPIO_Init+0x240>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d052      	beq.n	8000f24 <HAL_GPIO_Init+0x268>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1f      	ldr	r2, [pc, #124]	@ (8000f00 <HAL_GPIO_Init+0x244>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d031      	beq.n	8000eea <HAL_GPIO_Init+0x22e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <HAL_GPIO_Init+0x248>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_GPIO_Init+0x22a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a1d      	ldr	r2, [pc, #116]	@ (8000f08 <HAL_GPIO_Init+0x24c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d025      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <HAL_GPIO_Init+0x250>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01f      	beq.n	8000ede <HAL_GPIO_Init+0x222>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <HAL_GPIO_Init+0x254>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x21e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f14 <HAL_GPIO_Init+0x258>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x21a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	@ (8000f18 <HAL_GPIO_Init+0x25c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x216>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <HAL_GPIO_Init+0x260>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x212>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	@ (8000f20 <HAL_GPIO_Init+0x264>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x20e>
 8000ec6:	2309      	movs	r3, #9
 8000ec8:	e02d      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000eca:	230a      	movs	r3, #10
 8000ecc:	e02b      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ece:	2308      	movs	r3, #8
 8000ed0:	e029      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	e027      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	e025      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000eda:	2305      	movs	r3, #5
 8000edc:	e023      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ede:	2304      	movs	r3, #4
 8000ee0:	e021      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e01f      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e01d      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e01b      	b.n	8000f26 <HAL_GPIO_Init+0x26a>
 8000eee:	bf00      	nop
 8000ef0:	58000080 	.word	0x58000080
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58000400 	.word	0x58000400
 8000efc:	58020000 	.word	0x58020000
 8000f00:	58020400 	.word	0x58020400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020c00 	.word	0x58020c00
 8000f0c:	58021000 	.word	0x58021000
 8000f10:	58021400 	.word	0x58021400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021c00 	.word	0x58021c00
 8000f1c:	58022000 	.word	0x58022000
 8000f20:	58022400 	.word	0x58022400
 8000f24:	2300      	movs	r3, #0
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	f002 0203 	and.w	r2, r2, #3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4093      	lsls	r3, r2
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f36:	4938      	ldr	r1, [pc, #224]	@ (8001018 <HAL_GPIO_Init+0x35c>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f ae63 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3724      	adds	r7, #36	@ 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	58000400 	.word	0x58000400

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001038:	e003      	b.n	8001042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_PWREx_ConfigSupply+0x70>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b04      	cmp	r3, #4
 8001062:	d00a      	beq.n	800107a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001064:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <HAL_PWREx_ConfigSupply+0x70>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d001      	beq.n	8001076 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e01f      	b.n	80010b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e01d      	b.n	80010b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <HAL_PWREx_ConfigSupply+0x70>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f023 0207 	bic.w	r2, r3, #7
 8001082:	490f      	ldr	r1, [pc, #60]	@ (80010c0 <HAL_PWREx_ConfigSupply+0x70>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4313      	orrs	r3, r2
 8001088:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800108a:	f7ff fca3 	bl	80009d4 <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001090:	e009      	b.n	80010a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001092:	f7ff fc9f 	bl	80009d4 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010a0:	d901      	bls.n	80010a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e007      	b.n	80010b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_PWREx_ConfigSupply+0x70>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010b2:	d1ee      	bne.n	8001092 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	58024800 	.word	0x58024800

080010c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	@ 0x30
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f000 bc48 	b.w	8001968 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 8088 	beq.w	80011f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e6:	4b99      	ldr	r3, [pc, #612]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010f0:	4b96      	ldr	r3, [pc, #600]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80010f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f8:	2b10      	cmp	r3, #16
 80010fa:	d007      	beq.n	800110c <HAL_RCC_OscConfig+0x48>
 80010fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010fe:	2b18      	cmp	r3, #24
 8001100:	d111      	bne.n	8001126 <HAL_RCC_OscConfig+0x62>
 8001102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d10c      	bne.n	8001126 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	4b8f      	ldr	r3, [pc, #572]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d06d      	beq.n	80011f4 <HAL_RCC_OscConfig+0x130>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d169      	bne.n	80011f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	f000 bc21 	b.w	8001968 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800112e:	d106      	bne.n	800113e <HAL_RCC_OscConfig+0x7a>
 8001130:	4b86      	ldr	r3, [pc, #536]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a85      	ldr	r2, [pc, #532]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	e02e      	b.n	800119c <HAL_RCC_OscConfig+0xd8>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x9c>
 8001146:	4b81      	ldr	r3, [pc, #516]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a80      	ldr	r2, [pc, #512]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 800114c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b7e      	ldr	r3, [pc, #504]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a7d      	ldr	r2, [pc, #500]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001158:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e01d      	b.n	800119c <HAL_RCC_OscConfig+0xd8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0xc0>
 800116a:	4b78      	ldr	r3, [pc, #480]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a77      	ldr	r2, [pc, #476]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b75      	ldr	r3, [pc, #468]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a74      	ldr	r2, [pc, #464]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0xd8>
 8001184:	4b71      	ldr	r3, [pc, #452]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a70      	ldr	r2, [pc, #448]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b6e      	ldr	r3, [pc, #440]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a6d      	ldr	r2, [pc, #436]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc16 	bl	80009d4 <HAL_GetTick>
 80011a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fc12 	bl	80009d4 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e3d4      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011be:	4b63      	ldr	r3, [pc, #396]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0xe8>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc02 	bl	80009d4 <HAL_GetTick>
 80011d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fbfe 	bl	80009d4 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	@ 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e3c0      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011e6:	4b59      	ldr	r3, [pc, #356]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x110>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80ca 	beq.w	8001398 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001204:	4b51      	ldr	r3, [pc, #324]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800120c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800120e:	4b4f      	ldr	r3, [pc, #316]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001212:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001214:	6a3b      	ldr	r3, [r7, #32]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <HAL_RCC_OscConfig+0x166>
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	2b18      	cmp	r3, #24
 800121e:	d156      	bne.n	80012ce <HAL_RCC_OscConfig+0x20a>
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d151      	bne.n	80012ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800122a:	4b48      	ldr	r3, [pc, #288]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x17e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e392      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001242:	4b42      	ldr	r3, [pc, #264]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 0219 	bic.w	r2, r3, #25
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	493f      	ldr	r1, [pc, #252]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fbbe 	bl	80009d4 <HAL_GetTick>
 8001258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fbba 	bl	80009d4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e37c      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800126e:	4b37      	ldr	r3, [pc, #220]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	f7ff fbb7 	bl	80009ec <HAL_GetREVID>
 800127e:	4603      	mov	r3, r0
 8001280:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001284:	4293      	cmp	r3, r2
 8001286:	d817      	bhi.n	80012b8 <HAL_RCC_OscConfig+0x1f4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	2b40      	cmp	r3, #64	@ 0x40
 800128e:	d108      	bne.n	80012a2 <HAL_RCC_OscConfig+0x1de>
 8001290:	4b2e      	ldr	r3, [pc, #184]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001298:	4a2c      	ldr	r2, [pc, #176]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 800129a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800129e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a0:	e07a      	b.n	8001398 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	031b      	lsls	r3, r3, #12
 80012b0:	4926      	ldr	r1, [pc, #152]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b6:	e06f      	b.n	8001398 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b8:	4b24      	ldr	r3, [pc, #144]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	061b      	lsls	r3, r3, #24
 80012c6:	4921      	ldr	r1, [pc, #132]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012cc:	e064      	b.n	8001398 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d047      	beq.n	8001366 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 0219 	bic.w	r2, r3, #25
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	491a      	ldr	r1, [pc, #104]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb74 	bl	80009d4 <HAL_GetTick>
 80012ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fb70 	bl	80009d4 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e332      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001302:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	f7ff fb6d 	bl	80009ec <HAL_GetREVID>
 8001312:	4603      	mov	r3, r0
 8001314:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001318:	4293      	cmp	r3, r2
 800131a:	d819      	bhi.n	8001350 <HAL_RCC_OscConfig+0x28c>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	2b40      	cmp	r3, #64	@ 0x40
 8001322:	d108      	bne.n	8001336 <HAL_RCC_OscConfig+0x272>
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800132c:	4a07      	ldr	r2, [pc, #28]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 800132e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001332:	6053      	str	r3, [r2, #4]
 8001334:	e030      	b.n	8001398 <HAL_RCC_OscConfig+0x2d4>
 8001336:	4b05      	ldr	r3, [pc, #20]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	031b      	lsls	r3, r3, #12
 8001344:	4901      	ldr	r1, [pc, #4]	@ (800134c <HAL_RCC_OscConfig+0x288>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
 800134a:	e025      	b.n	8001398 <HAL_RCC_OscConfig+0x2d4>
 800134c:	58024400 	.word	0x58024400
 8001350:	4b9a      	ldr	r3, [pc, #616]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	4997      	ldr	r1, [pc, #604]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
 8001364:	e018      	b.n	8001398 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001366:	4b95      	ldr	r3, [pc, #596]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a94      	ldr	r2, [pc, #592]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001372:	f7ff fb2f 	bl	80009d4 <HAL_GetTick>
 8001376:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137a:	f7ff fb2b 	bl	80009d4 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e2ed      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800138c:	4b8b      	ldr	r3, [pc, #556]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a9 	beq.w	80014f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a6:	4b85      	ldr	r3, [pc, #532]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013b0:	4b82      	ldr	r3, [pc, #520]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80013b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d007      	beq.n	80013cc <HAL_RCC_OscConfig+0x308>
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b18      	cmp	r3, #24
 80013c0:	d13a      	bne.n	8001438 <HAL_RCC_OscConfig+0x374>
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d135      	bne.n	8001438 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013cc:	4b7b      	ldr	r3, [pc, #492]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x320>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	2b80      	cmp	r3, #128	@ 0x80
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e2c1      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013e4:	f7ff fb02 	bl	80009ec <HAL_GetREVID>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d817      	bhi.n	8001422 <HAL_RCC_OscConfig+0x35e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	d108      	bne.n	800140c <HAL_RCC_OscConfig+0x348>
 80013fa:	4b70      	ldr	r3, [pc, #448]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001402:	4a6e      	ldr	r2, [pc, #440]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001404:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001408:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800140a:	e075      	b.n	80014f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800140c:	4b6b      	ldr	r3, [pc, #428]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	069b      	lsls	r3, r3, #26
 800141a:	4968      	ldr	r1, [pc, #416]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001420:	e06a      	b.n	80014f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001422:	4b66      	ldr	r3, [pc, #408]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	061b      	lsls	r3, r3, #24
 8001430:	4962      	ldr	r1, [pc, #392]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001432:	4313      	orrs	r3, r2
 8001434:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001436:	e05f      	b.n	80014f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d042      	beq.n	80014c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001440:	4b5e      	ldr	r3, [pc, #376]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a5d      	ldr	r2, [pc, #372]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800144a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fac2 	bl	80009d4 <HAL_GetTick>
 8001450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001454:	f7ff fabe 	bl	80009d4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e280      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001466:	4b55      	ldr	r3, [pc, #340]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001472:	f7ff fabb 	bl	80009ec <HAL_GetREVID>
 8001476:	4603      	mov	r3, r0
 8001478:	f241 0203 	movw	r2, #4099	@ 0x1003
 800147c:	4293      	cmp	r3, r2
 800147e:	d817      	bhi.n	80014b0 <HAL_RCC_OscConfig+0x3ec>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	2b20      	cmp	r3, #32
 8001486:	d108      	bne.n	800149a <HAL_RCC_OscConfig+0x3d6>
 8001488:	4b4c      	ldr	r3, [pc, #304]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001490:	4a4a      	ldr	r2, [pc, #296]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001492:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001496:	6053      	str	r3, [r2, #4]
 8001498:	e02e      	b.n	80014f8 <HAL_RCC_OscConfig+0x434>
 800149a:	4b48      	ldr	r3, [pc, #288]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	069b      	lsls	r3, r3, #26
 80014a8:	4944      	ldr	r1, [pc, #272]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
 80014ae:	e023      	b.n	80014f8 <HAL_RCC_OscConfig+0x434>
 80014b0:	4b42      	ldr	r3, [pc, #264]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	061b      	lsls	r3, r3, #24
 80014be:	493f      	ldr	r1, [pc, #252]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
 80014c4:	e018      	b.n	80014f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014c6:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a3c      	ldr	r2, [pc, #240]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80014cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fa7f 	bl	80009d4 <HAL_GetTick>
 80014d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014da:	f7ff fa7b 	bl	80009d4 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e23d      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014ec:	4b33      	ldr	r3, [pc, #204]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d036      	beq.n	8001572 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d019      	beq.n	8001540 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150c:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 800150e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001510:	4a2a      	ldr	r2, [pc, #168]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fa5c 	bl	80009d4 <HAL_GetTick>
 800151c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fa58 	bl	80009d4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e21a      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001532:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x45c>
 800153e:	e018      	b.n	8001572 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001540:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001544:	4a1d      	ldr	r2, [pc, #116]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fa42 	bl	80009d4 <HAL_GetTick>
 8001550:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fa3e 	bl	80009d4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e200      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	2b00      	cmp	r3, #0
 800157c:	d039      	beq.n	80015f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01c      	beq.n	80015c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 800158c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001590:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001592:	f7ff fa1f 	bl	80009d4 <HAL_GetTick>
 8001596:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800159a:	f7ff fa1b 	bl	80009d4 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1dd      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_RCC_OscConfig+0x4f8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x4d6>
 80015b8:	e01b      	b.n	80015f2 <HAL_RCC_OscConfig+0x52e>
 80015ba:	bf00      	nop
 80015bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a9a      	ldr	r2, [pc, #616]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80015c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa02 	bl	80009d4 <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015d4:	f7ff f9fe 	bl	80009d4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1c0      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015e6:	4b92      	ldr	r3, [pc, #584]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8081 	beq.w	8001702 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001600:	4b8c      	ldr	r3, [pc, #560]	@ (8001834 <HAL_RCC_OscConfig+0x770>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a8b      	ldr	r2, [pc, #556]	@ (8001834 <HAL_RCC_OscConfig+0x770>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800160c:	f7ff f9e2 	bl	80009d4 <HAL_GetTick>
 8001610:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7ff f9de 	bl	80009d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	@ 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1a0      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001626:	4b83      	ldr	r3, [pc, #524]	@ (8001834 <HAL_RCC_OscConfig+0x770>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x584>
 800163a:	4b7d      	ldr	r3, [pc, #500]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163e:	4a7c      	ldr	r2, [pc, #496]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	@ 0x70
 8001646:	e02d      	b.n	80016a4 <HAL_RCC_OscConfig+0x5e0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x5a6>
 8001650:	4b77      	ldr	r3, [pc, #476]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001654:	4a76      	ldr	r2, [pc, #472]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	@ 0x70
 800165c:	4b74      	ldr	r3, [pc, #464]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001660:	4a73      	ldr	r2, [pc, #460]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001662:	f023 0304 	bic.w	r3, r3, #4
 8001666:	6713      	str	r3, [r2, #112]	@ 0x70
 8001668:	e01c      	b.n	80016a4 <HAL_RCC_OscConfig+0x5e0>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b05      	cmp	r3, #5
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x5c8>
 8001672:	4b6f      	ldr	r3, [pc, #444]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001676:	4a6e      	ldr	r2, [pc, #440]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6713      	str	r3, [r2, #112]	@ 0x70
 800167e:	4b6c      	ldr	r3, [pc, #432]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001682:	4a6b      	ldr	r2, [pc, #428]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6713      	str	r3, [r2, #112]	@ 0x70
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0x5e0>
 800168c:	4b68      	ldr	r3, [pc, #416]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001690:	4a67      	ldr	r2, [pc, #412]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	@ 0x70
 8001698:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169c:	4a64      	ldr	r2, [pc, #400]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800169e:	f023 0304 	bic.w	r3, r3, #4
 80016a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d015      	beq.n	80016d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff f992 	bl	80009d4 <HAL_GetTick>
 80016b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff f98e 	bl	80009d4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e14e      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016ca:	4b59      	ldr	r3, [pc, #356]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ee      	beq.n	80016b4 <HAL_RCC_OscConfig+0x5f0>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff f97c 	bl	80009d4 <HAL_GetTick>
 80016dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016de:	e00a      	b.n	80016f6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e0:	f7ff f978 	bl	80009d4 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e138      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ee      	bne.n	80016e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 812d 	beq.w	8001966 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800170c:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001714:	2b18      	cmp	r3, #24
 8001716:	f000 80bd 	beq.w	8001894 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	2b02      	cmp	r3, #2
 8001720:	f040 809e 	bne.w	8001860 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b42      	ldr	r3, [pc, #264]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a41      	ldr	r2, [pc, #260]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800172a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800172e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff f950 	bl	80009d4 <HAL_GetTick>
 8001734:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff f94c 	bl	80009d4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e10e      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800174a:	4b39      	ldr	r3, [pc, #228]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001756:	4b36      	ldr	r3, [pc, #216]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800175a:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <HAL_RCC_OscConfig+0x774>)
 800175c:	4013      	ands	r3, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	430a      	orrs	r2, r1
 800176a:	4931      	ldr	r1, [pc, #196]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800176c:	4313      	orrs	r3, r2
 800176e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	3b01      	subs	r3, #1
 8001776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177e:	3b01      	subs	r3, #1
 8001780:	025b      	lsls	r3, r3, #9
 8001782:	b29b      	uxth	r3, r3
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178a:	3b01      	subs	r3, #1
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001798:	3b01      	subs	r3, #1
 800179a:	061b      	lsls	r3, r3, #24
 800179c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80017a0:	4923      	ldr	r1, [pc, #140]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80017a6:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017b6:	4b21      	ldr	r3, [pc, #132]	@ (800183c <HAL_RCC_OscConfig+0x778>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017be:	00d2      	lsls	r2, r2, #3
 80017c0:	491b      	ldr	r1, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ca:	f023 020c 	bic.w	r2, r3, #12
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	4917      	ldr	r1, [pc, #92]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017d8:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017dc:	f023 0202 	bic.w	r2, r3, #2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e4:	4912      	ldr	r1, [pc, #72]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ee:	4a10      	ldr	r2, [pc, #64]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001802:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800180c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001812:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_RCC_OscConfig+0x76c>)
 8001820:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff f8d5 	bl	80009d4 <HAL_GetTick>
 800182a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800182c:	e011      	b.n	8001852 <HAL_RCC_OscConfig+0x78e>
 800182e:	bf00      	nop
 8001830:	58024400 	.word	0x58024400
 8001834:	58024800 	.word	0x58024800
 8001838:	fffffc0c 	.word	0xfffffc0c
 800183c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f8c8 	bl	80009d4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e08a      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001852:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x77c>
 800185e:	e082      	b.n	8001966 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b43      	ldr	r3, [pc, #268]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a42      	ldr	r2, [pc, #264]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f8b2 	bl	80009d4 <HAL_GetTick>
 8001870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f8ae 	bl	80009d4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e070      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001886:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x7b0>
 8001892:	e068      	b.n	8001966 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001894:	4b36      	ldr	r3, [pc, #216]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800189a:	4b35      	ldr	r3, [pc, #212]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d031      	beq.n	800190c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 0203 	and.w	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d12a      	bne.n	800190c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d122      	bne.n	800190c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d11a      	bne.n	800190c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	0a5b      	lsrs	r3, r3, #9
 80018da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d111      	bne.n	800190c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d108      	bne.n	800190c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	0e1b      	lsrs	r3, r3, #24
 80018fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001906:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e02b      	b.n	8001968 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800191a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	429a      	cmp	r2, r3
 8001924:	d01f      	beq.n	8001966 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	4a11      	ldr	r2, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001932:	f7ff f84f 	bl	80009d4 <HAL_GetTick>
 8001936:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001938:	bf00      	nop
 800193a:	f7ff f84b 	bl	80009d4 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	4293      	cmp	r3, r2
 8001944:	d0f9      	beq.n	800193a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_RCC_OscConfig+0x8b0>)
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001952:	00d2      	lsls	r2, r2, #3
 8001954:	4906      	ldr	r1, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001956:	4313      	orrs	r3, r2
 8001958:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_RCC_OscConfig+0x8ac>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3730      	adds	r7, #48	@ 0x30
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58024400 	.word	0x58024400
 8001974:	ffff0007 	.word	0xffff0007

08001978 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e19c      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800198c:	4b8a      	ldr	r3, [pc, #552]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d910      	bls.n	80019bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199a:	4b87      	ldr	r3, [pc, #540]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 020f 	bic.w	r2, r3, #15
 80019a2:	4985      	ldr	r1, [pc, #532]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b83      	ldr	r3, [pc, #524]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e184      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	4b7b      	ldr	r3, [pc, #492]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d908      	bls.n	80019ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019d8:	4b78      	ldr	r3, [pc, #480]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4975      	ldr	r1, [pc, #468]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	4b70      	ldr	r3, [pc, #448]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d908      	bls.n	8001a18 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a06:	4b6d      	ldr	r3, [pc, #436]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	496a      	ldr	r1, [pc, #424]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	4b64      	ldr	r3, [pc, #400]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d908      	bls.n	8001a46 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a34:	4b61      	ldr	r3, [pc, #388]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	495e      	ldr	r1, [pc, #376]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	4b59      	ldr	r3, [pc, #356]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d908      	bls.n	8001a74 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a62:	4b56      	ldr	r3, [pc, #344]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4953      	ldr	r1, [pc, #332]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4b4d      	ldr	r3, [pc, #308]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d908      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b4a      	ldr	r3, [pc, #296]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f023 020f 	bic.w	r2, r3, #15
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4947      	ldr	r1, [pc, #284]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d055      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001aae:	4b43      	ldr	r3, [pc, #268]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4940      	ldr	r1, [pc, #256]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d121      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0f6      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ae0:	4b36      	ldr	r3, [pc, #216]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d115      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0ea      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001af8:	4b30      	ldr	r3, [pc, #192]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0de      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b08:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0d6      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f023 0207 	bic.w	r2, r3, #7
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4925      	ldr	r1, [pc, #148]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2a:	f7fe ff53 	bl	80009d4 <HAL_GetTick>
 8001b2e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7fe ff4f 	bl	80009d4 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0be      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d1eb      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d010      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d208      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f023 020f 	bic.w	r2, r3, #15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	490e      	ldr	r1, [pc, #56]	@ (8001bbc <HAL_RCC_ClockConfig+0x244>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d214      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 020f 	bic.w	r2, r3, #15
 8001b9e:	4906      	ldr	r1, [pc, #24]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <HAL_RCC_ClockConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e086      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x34e>
 8001bb8:	52002000 	.word	0x52002000
 8001bbc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d010      	beq.n	8001bee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d208      	bcs.n	8001bee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	4939      	ldr	r1, [pc, #228]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d010      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695a      	ldr	r2, [r3, #20]
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d208      	bcs.n	8001c1c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c0a:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	492e      	ldr	r1, [pc, #184]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	4b28      	ldr	r3, [pc, #160]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d208      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c38:	4b25      	ldr	r3, [pc, #148]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4922      	ldr	r1, [pc, #136]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d010      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d208      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c66:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4917      	ldr	r1, [pc, #92]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c78:	f000 f834 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b14      	ldr	r3, [pc, #80]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	4912      	ldr	r1, [pc, #72]	@ (8001cd4 <HAL_RCC_ClockConfig+0x35c>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c96:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_RCC_ClockConfig+0x358>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd4 <HAL_RCC_ClockConfig+0x35c>)
 8001ca0:	5cd3      	ldrb	r3, [r2, r3]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <HAL_RCC_ClockConfig+0x360>)
 8001cae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <HAL_RCC_ClockConfig+0x364>)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_RCC_ClockConfig+0x368>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fe40 	bl	8000940 <HAL_InitTick>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	58024400 	.word	0x58024400
 8001cd4:	080041b4 	.word	0x080041b4
 8001cd8:	24000008 	.word	0x24000008
 8001cdc:	24000004 	.word	0x24000004
 8001ce0:	2400000c 	.word	0x2400000c

08001ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cea:	4bb3      	ldr	r3, [pc, #716]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cf2:	2b18      	cmp	r3, #24
 8001cf4:	f200 8155 	bhi.w	8001fa2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d65 	.word	0x08001d65
 8001d04:	08001fa3 	.word	0x08001fa3
 8001d08:	08001fa3 	.word	0x08001fa3
 8001d0c:	08001fa3 	.word	0x08001fa3
 8001d10:	08001fa3 	.word	0x08001fa3
 8001d14:	08001fa3 	.word	0x08001fa3
 8001d18:	08001fa3 	.word	0x08001fa3
 8001d1c:	08001fa3 	.word	0x08001fa3
 8001d20:	08001d8b 	.word	0x08001d8b
 8001d24:	08001fa3 	.word	0x08001fa3
 8001d28:	08001fa3 	.word	0x08001fa3
 8001d2c:	08001fa3 	.word	0x08001fa3
 8001d30:	08001fa3 	.word	0x08001fa3
 8001d34:	08001fa3 	.word	0x08001fa3
 8001d38:	08001fa3 	.word	0x08001fa3
 8001d3c:	08001fa3 	.word	0x08001fa3
 8001d40:	08001d91 	.word	0x08001d91
 8001d44:	08001fa3 	.word	0x08001fa3
 8001d48:	08001fa3 	.word	0x08001fa3
 8001d4c:	08001fa3 	.word	0x08001fa3
 8001d50:	08001fa3 	.word	0x08001fa3
 8001d54:	08001fa3 	.word	0x08001fa3
 8001d58:	08001fa3 	.word	0x08001fa3
 8001d5c:	08001fa3 	.word	0x08001fa3
 8001d60:	08001d97 	.word	0x08001d97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d64:	4b94      	ldr	r3, [pc, #592]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d009      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d70:	4b91      	ldr	r3, [pc, #580]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	4a90      	ldr	r2, [pc, #576]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d82:	e111      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d84:	4b8d      	ldr	r3, [pc, #564]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d86:	61bb      	str	r3, [r7, #24]
      break;
 8001d88:	e10e      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d8a:	4b8d      	ldr	r3, [pc, #564]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d8c:	61bb      	str	r3, [r7, #24]
      break;
 8001d8e:	e10b      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d90:	4b8c      	ldr	r3, [pc, #560]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d92:	61bb      	str	r3, [r7, #24]
      break;
 8001d94:	e108      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d96:	4b88      	ldr	r3, [pc, #544]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001da0:	4b85      	ldr	r3, [pc, #532]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001daa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001dac:	4b82      	ldr	r3, [pc, #520]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001db6:	4b80      	ldr	r3, [pc, #512]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dba:	08db      	lsrs	r3, r3, #3
 8001dbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80e1 	beq.w	8001f9c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	f000 8083 	beq.w	8001ee8 <HAL_RCC_GetSysClockFreq+0x204>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	f200 80a1 	bhi.w	8001f2c <HAL_RCC_GetSysClockFreq+0x248>
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x114>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d056      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001df6:	e099      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001df8:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d02d      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e04:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	4a6b      	ldr	r2, [pc, #428]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e2e:	4b62      	ldr	r3, [pc, #392]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e42:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001e5e:	e087      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e6a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001fcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e72:	4b51      	ldr	r3, [pc, #324]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e86:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ea2:	e065      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001fd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eb6:	4b40      	ldr	r3, [pc, #256]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ee6:	e043      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001fd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001efa:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f0e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f2a:	e021      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f36:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001fd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f52:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001fc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f6e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f70:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	0a5b      	lsrs	r3, r3, #9
 8001f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f94:	ee17 3a90 	vmov	r3, s15
 8001f98:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
      break;
 8001fa0:	e002      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fa4:	61bb      	str	r3, [r7, #24]
      break;
 8001fa6:	bf00      	nop
  }

  return sysclockfreq;
 8001fa8:	69bb      	ldr	r3, [r7, #24]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	@ 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	03d09000 	.word	0x03d09000
 8001fc0:	003d0900 	.word	0x003d0900
 8001fc4:	017d7840 	.word	0x017d7840
 8001fc8:	46000000 	.word	0x46000000
 8001fcc:	4c742400 	.word	0x4c742400
 8001fd0:	4a742400 	.word	0x4a742400
 8001fd4:	4bbebc20 	.word	0x4bbebc20

08001fd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b0ca      	sub	sp, #296	@ 0x128
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8001ffc:	2500      	movs	r5, #0
 8001ffe:	ea54 0305 	orrs.w	r3, r4, r5
 8002002:	d049      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800200a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800200e:	d02f      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002010:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002014:	d828      	bhi.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002016:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800201a:	d01a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800201c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002020:	d822      	bhi.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800202a:	d007      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800202c:	e01c      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800202e:	4bb8      	ldr	r3, [pc, #736]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	4ab7      	ldr	r2, [pc, #732]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800203a:	e01a      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800203c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002040:	3308      	adds	r3, #8
 8002042:	2102      	movs	r1, #2
 8002044:	4618      	mov	r0, r3
 8002046:	f001 f9d1 	bl	80033ec <RCCEx_PLL2_Config>
 800204a:	4603      	mov	r3, r0
 800204c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002050:	e00f      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002056:	3328      	adds	r3, #40	@ 0x28
 8002058:	2102      	movs	r1, #2
 800205a:	4618      	mov	r0, r3
 800205c:	f001 fa78 	bl	8003550 <RCCEx_PLL3_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002066:	e004      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800206e:	e000      	b.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800207a:	4ba5      	ldr	r3, [pc, #660]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800207c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800207e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002088:	4aa1      	ldr	r2, [pc, #644]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800208a:	430b      	orrs	r3, r1
 800208c:	6513      	str	r3, [r2, #80]	@ 0x50
 800208e:	e003      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80020a4:	f04f 0900 	mov.w	r9, #0
 80020a8:	ea58 0309 	orrs.w	r3, r8, r9
 80020ac:	d047      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80020ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d82a      	bhi.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80020b8:	a201      	add	r2, pc, #4	@ (adr r2, 80020c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80020ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	080020d5 	.word	0x080020d5
 80020c4:	080020e3 	.word	0x080020e3
 80020c8:	080020f9 	.word	0x080020f9
 80020cc:	08002117 	.word	0x08002117
 80020d0:	08002117 	.word	0x08002117
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	4a8d      	ldr	r2, [pc, #564]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020e0:	e01a      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80020e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020e6:	3308      	adds	r3, #8
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 f97e 	bl	80033ec <RCCEx_PLL2_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020f6:	e00f      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020fc:	3328      	adds	r3, #40	@ 0x28
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f001 fa25 	bl	8003550 <RCCEx_PLL3_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800210c:	e004      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002114:	e000      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10a      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002120:	4b7b      	ldr	r3, [pc, #492]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002124:	f023 0107 	bic.w	r1, r3, #7
 8002128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	4a78      	ldr	r2, [pc, #480]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002130:	430b      	orrs	r3, r1
 8002132:	6513      	str	r3, [r2, #80]	@ 0x50
 8002134:	e003      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800213a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800213e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800214a:	f04f 0b00 	mov.w	fp, #0
 800214e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002152:	d04c      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800215e:	d030      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002164:	d829      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002166:	2bc0      	cmp	r3, #192	@ 0xc0
 8002168:	d02d      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800216a:	2bc0      	cmp	r3, #192	@ 0xc0
 800216c:	d825      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800216e:	2b80      	cmp	r3, #128	@ 0x80
 8002170:	d018      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002172:	2b80      	cmp	r3, #128	@ 0x80
 8002174:	d821      	bhi.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800217a:	2b40      	cmp	r3, #64	@ 0x40
 800217c:	d007      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800217e:	e01c      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002180:	4b63      	ldr	r3, [pc, #396]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	4a62      	ldr	r2, [pc, #392]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800218a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800218c:	e01c      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800218e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002192:	3308      	adds	r3, #8
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f001 f928 	bl	80033ec <RCCEx_PLL2_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80021a2:	e011      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021a8:	3328      	adds	r3, #40	@ 0x28
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 f9cf 	bl	8003550 <RCCEx_PLL3_Config>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80021b8:	e006      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80021c0:	e002      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80021c2:	bf00      	nop
 80021c4:	e000      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80021c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80021d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80021d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021de:	4a4c      	ldr	r2, [pc, #304]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021e0:	430b      	orrs	r3, r1
 80021e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80021e4:	e003      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80021ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80021ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80021fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002204:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002208:	460b      	mov	r3, r1
 800220a:	4313      	orrs	r3, r2
 800220c:	d053      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800220e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002212:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002216:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800221a:	d035      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800221c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002220:	d82e      	bhi.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002222:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002226:	d031      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002228:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800222c:	d828      	bhi.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002232:	d01a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002238:	d822      	bhi.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800223e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002242:	d007      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002244:	e01c      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002246:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	4a31      	ldr	r2, [pc, #196]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002250:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002252:	e01c      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002258:	3308      	adds	r3, #8
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f001 f8c5 	bl	80033ec <RCCEx_PLL2_Config>
 8002262:	4603      	mov	r3, r0
 8002264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002268:	e011      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800226a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800226e:	3328      	adds	r3, #40	@ 0x28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f001 f96c 	bl	8003550 <RCCEx_PLL3_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800227e:	e006      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002286:	e002      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800228c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800228e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800229e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80022a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ac:	e003      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80022b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80022c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80022d0:	460b      	mov	r3, r1
 80022d2:	4313      	orrs	r3, r2
 80022d4:	d056      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80022d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80022de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e2:	d038      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80022e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e8:	d831      	bhi.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022ee:	d034      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80022f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022f4:	d82b      	bhi.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80022f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022fa:	d01d      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80022fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002300:	d825      	bhi.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800230c:	e01f      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800230e:	bf00      	nop
 8002310:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002314:	4ba2      	ldr	r3, [pc, #648]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002318:	4aa1      	ldr	r2, [pc, #644]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800231a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800231e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002320:	e01c      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002326:	3308      	adds	r3, #8
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f001 f85e 	bl	80033ec <RCCEx_PLL2_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002336:	e011      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800233c:	3328      	adds	r3, #40	@ 0x28
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f001 f905 	bl	8003550 <RCCEx_PLL3_Config>
 8002346:	4603      	mov	r3, r0
 8002348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800234c:	e006      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002354:	e002      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002356:	bf00      	nop
 8002358:	e000      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800235a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800235c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002364:	4b8e      	ldr	r3, [pc, #568]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800236c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002370:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002374:	4a8a      	ldr	r2, [pc, #552]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002376:	430b      	orrs	r3, r1
 8002378:	6593      	str	r3, [r2, #88]	@ 0x58
 800237a:	e003      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800237c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002390:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800239a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800239e:	460b      	mov	r3, r1
 80023a0:	4313      	orrs	r3, r2
 80023a2:	d03a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80023a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	2b30      	cmp	r3, #48	@ 0x30
 80023ac:	d01f      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80023ae:	2b30      	cmp	r3, #48	@ 0x30
 80023b0:	d819      	bhi.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d815      	bhi.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d019      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d111      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023c2:	4b77      	ldr	r3, [pc, #476]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c6:	4a76      	ldr	r2, [pc, #472]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80023ce:	e011      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023d4:	3308      	adds	r3, #8
 80023d6:	2102      	movs	r1, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f001 f807 	bl	80033ec <RCCEx_PLL2_Config>
 80023de:	4603      	mov	r3, r0
 80023e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80023e4:	e006      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80023ec:	e002      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80023ee:	bf00      	nop
 80023f0:	e000      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80023f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023fc:	4b68      	ldr	r3, [pc, #416]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002400:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	4a65      	ldr	r2, [pc, #404]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800240c:	430b      	orrs	r3, r1
 800240e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002410:	e003      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800241a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002426:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002430:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002434:	460b      	mov	r3, r1
 8002436:	4313      	orrs	r3, r2
 8002438:	d051      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800243a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800243e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002440:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002444:	d035      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002446:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800244a:	d82e      	bhi.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800244c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002450:	d031      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002452:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002456:	d828      	bhi.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800245c:	d01a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800245e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002462:	d822      	bhi.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002468:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800246c:	d007      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800246e:	e01c      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002470:	4b4b      	ldr	r3, [pc, #300]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	4a4a      	ldr	r2, [pc, #296]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800247a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800247c:	e01c      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800247e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002482:	3308      	adds	r3, #8
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f000 ffb0 	bl	80033ec <RCCEx_PLL2_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002492:	e011      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002498:	3328      	adds	r3, #40	@ 0x28
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f001 f857 	bl	8003550 <RCCEx_PLL3_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80024a8:	e006      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024b0:	e002      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80024b2:	bf00      	nop
 80024b4:	e000      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80024b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80024c0:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80024c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ce:	4a34      	ldr	r2, [pc, #208]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80024d4:	e003      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80024de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80024ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80024f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80024f8:	460b      	mov	r3, r1
 80024fa:	4313      	orrs	r3, r2
 80024fc:	d056      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80024fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002508:	d033      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800250a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800250e:	d82c      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002510:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002514:	d02f      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002516:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800251a:	d826      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800251c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002520:	d02b      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002522:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002526:	d820      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800252c:	d012      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800252e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002532:	d81a      	bhi.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002534:	2b00      	cmp	r3, #0
 8002536:	d022      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253c:	d115      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800253e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002542:	3308      	adds	r3, #8
 8002544:	2101      	movs	r1, #1
 8002546:	4618      	mov	r0, r3
 8002548:	f000 ff50 	bl	80033ec <RCCEx_PLL2_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002552:	e015      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002558:	3328      	adds	r3, #40	@ 0x28
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fff7 	bl	8003550 <RCCEx_PLL3_Config>
 8002562:	4603      	mov	r3, r0
 8002564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002568:	e00a      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002570:	e006      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002572:	bf00      	nop
 8002574:	e004      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002576:	bf00      	nop
 8002578:	e002      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800257e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10d      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002588:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800258a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800258c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002596:	4a02      	ldr	r2, [pc, #8]	@ (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002598:	430b      	orrs	r3, r1
 800259a:	6513      	str	r3, [r2, #80]	@ 0x50
 800259c:	e006      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800259e:	bf00      	nop
 80025a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80025ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80025b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4313      	orrs	r3, r2
 80025ca:	d055      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80025cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80025d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d8:	d033      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80025da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025de:	d82c      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e4:	d02f      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ea:	d826      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80025f0:	d02b      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80025f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80025f6:	d820      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80025f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025fc:	d012      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80025fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002602:	d81a      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d022      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800260c:	d115      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800260e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002612:	3308      	adds	r3, #8
 8002614:	2101      	movs	r1, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fee8 	bl	80033ec <RCCEx_PLL2_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002622:	e015      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002628:	3328      	adds	r3, #40	@ 0x28
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f000 ff8f 	bl	8003550 <RCCEx_PLL3_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002638:	e00a      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002640:	e006      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002642:	bf00      	nop
 8002644:	e004      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002646:	bf00      	nop
 8002648:	e002      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800264e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002658:	4ba3      	ldr	r3, [pc, #652]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002668:	4a9f      	ldr	r2, [pc, #636]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800266a:	430b      	orrs	r3, r1
 800266c:	6593      	str	r3, [r2, #88]	@ 0x58
 800266e:	e003      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002684:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002688:	2300      	movs	r3, #0
 800268a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800268e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002692:	460b      	mov	r3, r1
 8002694:	4313      	orrs	r3, r2
 8002696:	d037      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800269c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026a2:	d00e      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80026a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026a8:	d816      	bhi.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d018      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80026ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026b2:	d111      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b4:	4b8c      	ldr	r3, [pc, #560]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	4a8b      	ldr	r2, [pc, #556]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80026c0:	e00f      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80026c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026c6:	3308      	adds	r3, #8
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fe8e 	bl	80033ec <RCCEx_PLL2_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80026d6:	e004      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026de:	e000      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80026e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026ea:	4b7f      	ldr	r3, [pc, #508]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80026f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f8:	4a7b      	ldr	r2, [pc, #492]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80026fa:	430b      	orrs	r3, r1
 80026fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80026fe:	e003      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800271e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002722:	460b      	mov	r3, r1
 8002724:	4313      	orrs	r3, r2
 8002726:	d039      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800272c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272e:	2b03      	cmp	r3, #3
 8002730:	d81c      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002732:	a201      	add	r2, pc, #4	@ (adr r2, 8002738 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002775 	.word	0x08002775
 800273c:	08002749 	.word	0x08002749
 8002740:	08002757 	.word	0x08002757
 8002744:	08002775 	.word	0x08002775
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002748:	4b67      	ldr	r3, [pc, #412]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	4a66      	ldr	r2, [pc, #408]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800274e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002754:	e00f      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275a:	3308      	adds	r3, #8
 800275c:	2102      	movs	r1, #2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fe44 	bl	80033ec <RCCEx_PLL2_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800276a:	e004      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002772:	e000      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800277e:	4b5a      	ldr	r3, [pc, #360]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002782:	f023 0103 	bic.w	r1, r3, #3
 8002786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800278a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278c:	4a56      	ldr	r2, [pc, #344]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800278e:	430b      	orrs	r3, r1
 8002790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002792:	e003      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800279c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80027a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80027b6:	460b      	mov	r3, r1
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f000 809f 	beq.w	80028fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027be:	4b4b      	ldr	r3, [pc, #300]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a4a      	ldr	r2, [pc, #296]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ca:	f7fe f903 	bl	80009d4 <HAL_GetTick>
 80027ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027d2:	e00b      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d4:	f7fe f8fe 	bl	80009d4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	@ 0x64
 80027e2:	d903      	bls.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027ea:	e005      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ec:	4b3f      	ldr	r3, [pc, #252]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ed      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80027f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d179      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002800:	4b39      	ldr	r3, [pc, #228]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002802:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002808:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800280c:	4053      	eors	r3, r2
 800280e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002812:	2b00      	cmp	r3, #0
 8002814:	d015      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002816:	4b34      	ldr	r3, [pc, #208]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800281e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002822:	4b31      	ldr	r3, [pc, #196]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002826:	4a30      	ldr	r2, [pc, #192]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800282e:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a2d      	ldr	r2, [pc, #180]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002838:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800283a:	4a2b      	ldr	r2, [pc, #172]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800283c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002840:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800284a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800284e:	d118      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe f8c0 	bl	80009d4 <HAL_GetTick>
 8002854:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002858:	e00d      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe f8bb 	bl	80009d4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002864:	1ad2      	subs	r2, r2, r3
 8002866:	f241 3388 	movw	r3, #5000	@ 0x1388
 800286a:	429a      	cmp	r2, r3
 800286c:	d903      	bls.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002874:	e005      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002876:	4b1c      	ldr	r3, [pc, #112]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0eb      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002886:	2b00      	cmp	r3, #0
 8002888:	d129      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800288e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800289a:	d10e      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80028a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028ac:	091a      	lsrs	r2, r3, #4
 80028ae:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028b4:	430b      	orrs	r3, r1
 80028b6:	6113      	str	r3, [r2, #16]
 80028b8:	e005      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80028ba:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028c4:	6113      	str	r3, [r2, #16]
 80028c6:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80028ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80028d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d6:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028d8:	430b      	orrs	r3, r1
 80028da:	6713      	str	r3, [r2, #112]	@ 0x70
 80028dc:	e00e      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80028e6:	e009      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80028e8:	58024400 	.word	0x58024400
 80028ec:	58024800 	.word	0x58024800
 80028f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f002 0301 	and.w	r3, r2, #1
 8002908:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002912:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002916:	460b      	mov	r3, r1
 8002918:	4313      	orrs	r3, r2
 800291a:	f000 8089 	beq.w	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002924:	2b28      	cmp	r3, #40	@ 0x28
 8002926:	d86b      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002928:	a201      	add	r2, pc, #4	@ (adr r2, 8002930 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002a09 	.word	0x08002a09
 8002934:	08002a01 	.word	0x08002a01
 8002938:	08002a01 	.word	0x08002a01
 800293c:	08002a01 	.word	0x08002a01
 8002940:	08002a01 	.word	0x08002a01
 8002944:	08002a01 	.word	0x08002a01
 8002948:	08002a01 	.word	0x08002a01
 800294c:	08002a01 	.word	0x08002a01
 8002950:	080029d5 	.word	0x080029d5
 8002954:	08002a01 	.word	0x08002a01
 8002958:	08002a01 	.word	0x08002a01
 800295c:	08002a01 	.word	0x08002a01
 8002960:	08002a01 	.word	0x08002a01
 8002964:	08002a01 	.word	0x08002a01
 8002968:	08002a01 	.word	0x08002a01
 800296c:	08002a01 	.word	0x08002a01
 8002970:	080029eb 	.word	0x080029eb
 8002974:	08002a01 	.word	0x08002a01
 8002978:	08002a01 	.word	0x08002a01
 800297c:	08002a01 	.word	0x08002a01
 8002980:	08002a01 	.word	0x08002a01
 8002984:	08002a01 	.word	0x08002a01
 8002988:	08002a01 	.word	0x08002a01
 800298c:	08002a01 	.word	0x08002a01
 8002990:	08002a09 	.word	0x08002a09
 8002994:	08002a01 	.word	0x08002a01
 8002998:	08002a01 	.word	0x08002a01
 800299c:	08002a01 	.word	0x08002a01
 80029a0:	08002a01 	.word	0x08002a01
 80029a4:	08002a01 	.word	0x08002a01
 80029a8:	08002a01 	.word	0x08002a01
 80029ac:	08002a01 	.word	0x08002a01
 80029b0:	08002a09 	.word	0x08002a09
 80029b4:	08002a01 	.word	0x08002a01
 80029b8:	08002a01 	.word	0x08002a01
 80029bc:	08002a01 	.word	0x08002a01
 80029c0:	08002a01 	.word	0x08002a01
 80029c4:	08002a01 	.word	0x08002a01
 80029c8:	08002a01 	.word	0x08002a01
 80029cc:	08002a01 	.word	0x08002a01
 80029d0:	08002a09 	.word	0x08002a09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d8:	3308      	adds	r3, #8
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fd05 	bl	80033ec <RCCEx_PLL2_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80029e8:	e00f      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029ee:	3328      	adds	r3, #40	@ 0x28
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fdac 	bl	8003550 <RCCEx_PLL3_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80029fe:	e004      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a12:	4bbf      	ldr	r3, [pc, #764]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a20:	4abb      	ldr	r2, [pc, #748]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002a22:	430b      	orrs	r3, r1
 8002a24:	6553      	str	r3, [r2, #84]	@ 0x54
 8002a26:	e003      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f002 0302 	and.w	r3, r2, #2
 8002a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	d041      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d824      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002aad 	.word	0x08002aad
 8002a64:	08002a79 	.word	0x08002a79
 8002a68:	08002a8f 	.word	0x08002a8f
 8002a6c:	08002aad 	.word	0x08002aad
 8002a70:	08002aad 	.word	0x08002aad
 8002a74:	08002aad 	.word	0x08002aad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fcb3 	bl	80033ec <RCCEx_PLL2_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002a8c:	e00f      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a92:	3328      	adds	r3, #40	@ 0x28
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd5a 	bl	8003550 <RCCEx_PLL3_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002aa2:	e004      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aaa:	e000      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ab6:	4b96      	ldr	r3, [pc, #600]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aba:	f023 0107 	bic.w	r1, r3, #7
 8002abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ac4:	4a92      	ldr	r2, [pc, #584]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8002aca:	e003      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f002 0304 	and.w	r3, r2, #4
 8002ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4313      	orrs	r3, r2
 8002af2:	d044      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d825      	bhi.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002b00:	a201      	add	r2, pc, #4	@ (adr r2, 8002b08 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b55 	.word	0x08002b55
 8002b0c:	08002b21 	.word	0x08002b21
 8002b10:	08002b37 	.word	0x08002b37
 8002b14:	08002b55 	.word	0x08002b55
 8002b18:	08002b55 	.word	0x08002b55
 8002b1c:	08002b55 	.word	0x08002b55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b24:	3308      	adds	r3, #8
 8002b26:	2101      	movs	r1, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fc5f 	bl	80033ec <RCCEx_PLL2_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002b34:	e00f      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3a:	3328      	adds	r3, #40	@ 0x28
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fd06 	bl	8003550 <RCCEx_PLL3_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002b4a:	e004      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b52:	e000      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10b      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b62:	f023 0107 	bic.w	r1, r3, #7
 8002b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6e:	4a68      	ldr	r2, [pc, #416]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b74:	e003      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f002 0320 	and.w	r3, r2, #32
 8002b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	d055      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002baa:	d033      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bb0:	d82c      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb6:	d02f      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbc:	d826      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002bbe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bc2:	d02b      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002bc4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bc8:	d820      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bce:	d012      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bd4:	d81a      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d022      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bde:	d115      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be4:	3308      	adds	r3, #8
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fbff 	bl	80033ec <RCCEx_PLL2_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002bf4:	e015      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfa:	3328      	adds	r3, #40	@ 0x28
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fca6 	bl	8003550 <RCCEx_PLL3_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c12:	e006      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c14:	bf00      	nop
 8002c16:	e004      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c18:	bf00      	nop
 8002c1a:	e002      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c1c:	bf00      	nop
 8002c1e:	e000      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10b      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c2a:	4b39      	ldr	r3, [pc, #228]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	4a35      	ldr	r2, [pc, #212]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8002c40:	e003      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002c56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002c60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4313      	orrs	r3, r2
 8002c68:	d058      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002c76:	d033      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002c78:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002c7c:	d82c      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c82:	d02f      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002c84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c88:	d826      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c8e:	d02b      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002c90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c94:	d820      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c9a:	d012      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002c9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ca0:	d81a      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d022      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002caa:	d115      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fb99 	bl	80033ec <RCCEx_PLL2_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002cc0:	e015      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc6:	3328      	adds	r3, #40	@ 0x28
 8002cc8:	2102      	movs	r1, #2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fc40 	bl	8003550 <RCCEx_PLL3_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002cd6:	e00a      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cde:	e006      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002ce0:	bf00      	nop
 8002ce2:	e004      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002ce4:	bf00      	nop
 8002ce6:	e002      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10e      	bne.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d06:	4a02      	ldr	r2, [pc, #8]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d0c:	e006      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002d0e:	bf00      	nop
 8002d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002d28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002d36:	460b      	mov	r3, r1
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	d055      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d44:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002d48:	d033      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002d4a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002d4e:	d82c      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d54:	d02f      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d5a:	d826      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d5c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002d60:	d02b      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002d62:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002d66:	d820      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d6c:	d012      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002d6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d72:	d81a      	bhi.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d022      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7c:	d115      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d82:	3308      	adds	r3, #8
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fb30 	bl	80033ec <RCCEx_PLL2_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002d92:	e015      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d98:	3328      	adds	r3, #40	@ 0x28
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fbd7 	bl	8003550 <RCCEx_PLL3_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002db0:	e006      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002db2:	bf00      	nop
 8002db4:	e004      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002db6:	bf00      	nop
 8002db8:	e002      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002dba:	bf00      	nop
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002dc8:	4ba1      	ldr	r3, [pc, #644]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002dd8:	4a9d      	ldr	r2, [pc, #628]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dde:	e003      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f002 0308 	and.w	r3, r2, #8
 8002df4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dfe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002e02:	460b      	mov	r3, r1
 8002e04:	4313      	orrs	r3, r2
 8002e06:	d01e      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1a:	3328      	adds	r3, #40	@ 0x28
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fb96 	bl	8003550 <RCCEx_PLL3_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002e30:	4b87      	ldr	r3, [pc, #540]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e40:	4a83      	ldr	r2, [pc, #524]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e42:	430b      	orrs	r3, r1
 8002e44:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	f002 0310 	and.w	r3, r2, #16
 8002e52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002e60:	460b      	mov	r3, r1
 8002e62:	4313      	orrs	r3, r2
 8002e64:	d01e      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e78:	3328      	adds	r3, #40	@ 0x28
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fb67 	bl	8003550 <RCCEx_PLL3_Config>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e8e:	4b70      	ldr	r3, [pc, #448]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002eba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	d03e      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ed0:	d022      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8002ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ed6:	d81b      	bhi.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d00b      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8002ee2:	e015      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee8:	3308      	adds	r3, #8
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fa7d 	bl	80033ec <RCCEx_PLL2_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002ef8:	e00f      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002efe:	3328      	adds	r3, #40	@ 0x28
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fb24 	bl	8003550 <RCCEx_PLL3_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002f0e:	e004      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8002f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f22:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f32:	4a47      	ldr	r2, [pc, #284]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f38:	e003      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8002f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f50:	2300      	movs	r3, #0
 8002f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f54:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	d03b      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f6a:	d01f      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002f6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f70:	d818      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8002f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f76:	d003      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8002f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f7c:	d007      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002f7e:	e011      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f80:	4b33      	ldr	r3, [pc, #204]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	4a32      	ldr	r2, [pc, #200]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002f8c:	e00f      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f92:	3328      	adds	r3, #40	@ 0x28
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fada 	bl	8003550 <RCCEx_PLL3_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8002fa2:	e004      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002faa:	e000      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8002fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb6:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	4a22      	ldr	r2, [pc, #136]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8002fe2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	677b      	str	r3, [r7, #116]	@ 0x74
 8002fe8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8002fec:	460b      	mov	r3, r1
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	d034      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8002ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003000:	d007      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003002:	e011      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003004:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	4a11      	ldr	r2, [pc, #68]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800300a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800300e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003010:	e00e      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003016:	3308      	adds	r3, #8
 8003018:	2102      	movs	r1, #2
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f9e6 	bl	80033ec <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003026:	e003      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800302e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800303a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003046:	4a02      	ldr	r2, [pc, #8]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003048:	430b      	orrs	r3, r1
 800304a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800304c:	e006      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800304e:	bf00      	nop
 8003050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800306a:	2300      	movs	r3, #0
 800306c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800306e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003072:	460b      	mov	r3, r1
 8003074:	4313      	orrs	r3, r2
 8003076:	d00c      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	3328      	adds	r3, #40	@ 0x28
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fa65 	bl	8003550 <RCCEx_PLL3_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800309e:	663b      	str	r3, [r7, #96]	@ 0x60
 80030a0:	2300      	movs	r3, #0
 80030a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80030a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80030a8:	460b      	mov	r3, r1
 80030aa:	4313      	orrs	r3, r2
 80030ac:	d038      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030ba:	d018      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80030bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030c0:	d811      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80030c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c6:	d014      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80030c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030cc:	d80b      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d011      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80030d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030d6:	d106      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d8:	4bc3      	ldr	r3, [pc, #780]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	4ac2      	ldr	r2, [pc, #776]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80030de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80030e4:	e008      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030ec:	e004      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80030f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10b      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003100:	4bb9      	ldr	r3, [pc, #740]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003104:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003110:	4ab5      	ldr	r2, [pc, #724]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003112:	430b      	orrs	r3, r1
 8003114:	6553      	str	r3, [r2, #84]	@ 0x54
 8003116:	e003      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800311c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800312c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800312e:	2300      	movs	r3, #0
 8003130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003132:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800313c:	4baa      	ldr	r3, [pc, #680]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800313e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003140:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314a:	4aa7      	ldr	r2, [pc, #668]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800314c:	430b      	orrs	r3, r1
 800314e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800315c:	653b      	str	r3, [r7, #80]	@ 0x50
 800315e:	2300      	movs	r3, #0
 8003160:	657b      	str	r3, [r7, #84]	@ 0x54
 8003162:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003166:	460b      	mov	r3, r1
 8003168:	4313      	orrs	r3, r2
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800316c:	4b9e      	ldr	r3, [pc, #632]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003178:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800317c:	4a9a      	ldr	r2, [pc, #616]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800317e:	430b      	orrs	r3, r1
 8003180:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800318e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003190:	2300      	movs	r3, #0
 8003192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003194:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003198:	460b      	mov	r3, r1
 800319a:	4313      	orrs	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800319e:	4b92      	ldr	r3, [pc, #584]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80031a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ac:	4a8e      	ldr	r2, [pc, #568]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031ae:	430b      	orrs	r3, r1
 80031b0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80031b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80031be:	643b      	str	r3, [r7, #64]	@ 0x40
 80031c0:	2300      	movs	r3, #0
 80031c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80031c8:	460b      	mov	r3, r1
 80031ca:	4313      	orrs	r3, r2
 80031cc:	d00e      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ce:	4b86      	ldr	r3, [pc, #536]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	4a85      	ldr	r2, [pc, #532]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80031d8:	6113      	str	r3, [r2, #16]
 80031da:	4b83      	ldr	r3, [pc, #524]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031dc:	6919      	ldr	r1, [r3, #16]
 80031de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80031e6:	4a80      	ldr	r2, [pc, #512]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80031f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031fa:	2300      	movs	r3, #0
 80031fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003202:	460b      	mov	r3, r1
 8003204:	4313      	orrs	r3, r2
 8003206:	d009      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003208:	4b77      	ldr	r3, [pc, #476]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800320a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800320c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003216:	4a74      	ldr	r2, [pc, #464]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003218:	430b      	orrs	r3, r1
 800321a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003228:	633b      	str	r3, [r7, #48]	@ 0x30
 800322a:	2300      	movs	r3, #0
 800322c:	637b      	str	r3, [r7, #52]	@ 0x34
 800322e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003232:	460b      	mov	r3, r1
 8003234:	4313      	orrs	r3, r2
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003238:	4b6b      	ldr	r3, [pc, #428]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003248:	4a67      	ldr	r2, [pc, #412]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800324a:	430b      	orrs	r3, r1
 800324c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	2100      	movs	r1, #0
 8003258:	62b9      	str	r1, [r7, #40]	@ 0x28
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003260:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003264:	460b      	mov	r3, r1
 8003266:	4313      	orrs	r3, r2
 8003268:	d011      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326e:	3308      	adds	r3, #8
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f8ba 	bl	80033ec <RCCEx_PLL2_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800327e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	2100      	movs	r1, #0
 8003298:	6239      	str	r1, [r7, #32]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80032a4:	460b      	mov	r3, r1
 80032a6:	4313      	orrs	r3, r2
 80032a8:	d011      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ae:	3308      	adds	r3, #8
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f89a 	bl	80033ec <RCCEx_PLL2_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80032be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80032ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	2100      	movs	r1, #0
 80032d8:	61b9      	str	r1, [r7, #24]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	61fb      	str	r3, [r7, #28]
 80032e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d011      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ee:	3308      	adds	r3, #8
 80032f0:	2102      	movs	r1, #2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f87a 	bl	80033ec <RCCEx_PLL2_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80032fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800330a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	2100      	movs	r1, #0
 8003318:	6139      	str	r1, [r7, #16]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003324:	460b      	mov	r3, r1
 8003326:	4313      	orrs	r3, r2
 8003328:	d011      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332e:	3328      	adds	r3, #40	@ 0x28
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f90c 	bl	8003550 <RCCEx_PLL3_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800333e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800334a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	2100      	movs	r1, #0
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003364:	460b      	mov	r3, r1
 8003366:	4313      	orrs	r3, r2
 8003368:	d011      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336e:	3328      	adds	r3, #40	@ 0x28
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f8ec 	bl	8003550 <RCCEx_PLL3_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800337e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	2100      	movs	r1, #0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80033a4:	460b      	mov	r3, r1
 80033a6:	4313      	orrs	r3, r2
 80033a8:	d011      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ae:	3328      	adds	r3, #40	@ 0x28
 80033b0:	2102      	movs	r1, #2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f8cc 	bl	8003550 <RCCEx_PLL3_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80033be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80033ce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
}
 80033dc:	4618      	mov	r0, r3
 80033de:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80033e2:	46bd      	mov	sp, r7
 80033e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e8:	58024400 	.word	0x58024400

080033ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80033fa:	4b53      	ldr	r3, [pc, #332]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b03      	cmp	r3, #3
 8003404:	d101      	bne.n	800340a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e099      	b.n	800353e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800340a:	4b4f      	ldr	r3, [pc, #316]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a4e      	ldr	r2, [pc, #312]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003410:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003416:	f7fd fadd 	bl	80009d4 <HAL_GetTick>
 800341a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800341c:	e008      	b.n	8003430 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800341e:	f7fd fad9 	bl	80009d4 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e086      	b.n	800353e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003430:	4b45      	ldr	r3, [pc, #276]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800343c:	4b42      	ldr	r3, [pc, #264]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	031b      	lsls	r3, r3, #12
 800344a:	493f      	ldr	r1, [pc, #252]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	3b01      	subs	r3, #1
 8003456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	3b01      	subs	r3, #1
 8003460:	025b      	lsls	r3, r3, #9
 8003462:	b29b      	uxth	r3, r3
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	3b01      	subs	r3, #1
 800346c:	041b      	lsls	r3, r3, #16
 800346e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	3b01      	subs	r3, #1
 800347a:	061b      	lsls	r3, r3, #24
 800347c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003480:	4931      	ldr	r1, [pc, #196]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003482:	4313      	orrs	r3, r2
 8003484:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003486:	4b30      	ldr	r3, [pc, #192]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	492d      	ldr	r1, [pc, #180]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003498:	4b2b      	ldr	r3, [pc, #172]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	f023 0220 	bic.w	r2, r3, #32
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	4928      	ldr	r1, [pc, #160]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80034aa:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	4a26      	ldr	r2, [pc, #152]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034b0:	f023 0310 	bic.w	r3, r3, #16
 80034b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80034b6:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034ba:	4b24      	ldr	r3, [pc, #144]	@ (800354c <RCCEx_PLL2_Config+0x160>)
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	69d2      	ldr	r2, [r2, #28]
 80034c2:	00d2      	lsls	r2, r2, #3
 80034c4:	4920      	ldr	r1, [pc, #128]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80034ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034d0:	f043 0310 	orr.w	r3, r3, #16
 80034d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d106      	bne.n	80034ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	4a19      	ldr	r2, [pc, #100]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80034e8:	e00f      	b.n	800350a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80034f0:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	4a14      	ldr	r2, [pc, #80]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 80034f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80034fc:	e005      	b.n	800350a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80034fe:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003502:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003504:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003508:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a0e      	ldr	r2, [pc, #56]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003510:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003516:	f7fd fa5d 	bl	80009d4 <HAL_GetTick>
 800351a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800351c:	e008      	b.n	8003530 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800351e:	f7fd fa59 	bl	80009d4 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e006      	b.n	800353e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <RCCEx_PLL2_Config+0x15c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800353c:	7bfb      	ldrb	r3, [r7, #15]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	58024400 	.word	0x58024400
 800354c:	ffff0007 	.word	0xffff0007

08003550 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800355e:	4b53      	ldr	r3, [pc, #332]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b03      	cmp	r3, #3
 8003568:	d101      	bne.n	800356e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e099      	b.n	80036a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800356e:	4b4f      	ldr	r3, [pc, #316]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4e      	ldr	r2, [pc, #312]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357a:	f7fd fa2b 	bl	80009d4 <HAL_GetTick>
 800357e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003580:	e008      	b.n	8003594 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003582:	f7fd fa27 	bl	80009d4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e086      	b.n	80036a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003594:	4b45      	ldr	r3, [pc, #276]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80035a0:	4b42      	ldr	r3, [pc, #264]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	051b      	lsls	r3, r3, #20
 80035ae:	493f      	ldr	r1, [pc, #252]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	025b      	lsls	r3, r3, #9
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	041b      	lsls	r3, r3, #16
 80035d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	3b01      	subs	r3, #1
 80035de:	061b      	lsls	r3, r3, #24
 80035e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80035e4:	4931      	ldr	r1, [pc, #196]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80035ea:	4b30      	ldr	r3, [pc, #192]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	492d      	ldr	r1, [pc, #180]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80035fc:	4b2b      	ldr	r3, [pc, #172]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	4928      	ldr	r1, [pc, #160]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 800360a:	4313      	orrs	r3, r2
 800360c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800360e:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	4a26      	ldr	r2, [pc, #152]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003618:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 800361c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800361e:	4b24      	ldr	r3, [pc, #144]	@ (80036b0 <RCCEx_PLL3_Config+0x160>)
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	69d2      	ldr	r2, [r2, #28]
 8003626:	00d2      	lsls	r2, r2, #3
 8003628:	4920      	ldr	r1, [pc, #128]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800362e:	4b1f      	ldr	r3, [pc, #124]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	4a1e      	ldr	r2, [pc, #120]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003638:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d106      	bne.n	800364e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003640:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4a19      	ldr	r2, [pc, #100]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003646:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800364a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800364c:	e00f      	b.n	800366e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003654:	4b15      	ldr	r3, [pc, #84]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	4a14      	ldr	r2, [pc, #80]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 800365a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800365e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003660:	e005      	b.n	800366e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003662:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003666:	4a11      	ldr	r2, [pc, #68]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003668:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800366e:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a0e      	ldr	r2, [pc, #56]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367a:	f7fd f9ab 	bl	80009d4 <HAL_GetTick>
 800367e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003680:	e008      	b.n	8003694 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003682:	f7fd f9a7 	bl	80009d4 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e006      	b.n	80036a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <RCCEx_PLL3_Config+0x15c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	58024400 	.word	0x58024400
 80036b0:	ffff0007 	.word	0xffff0007

080036b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e10f      	b.n	80038e6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a87      	ldr	r2, [pc, #540]	@ (80038f0 <HAL_SPI_Init+0x23c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00f      	beq.n	80036f6 <HAL_SPI_Init+0x42>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a86      	ldr	r2, [pc, #536]	@ (80038f4 <HAL_SPI_Init+0x240>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00a      	beq.n	80036f6 <HAL_SPI_Init+0x42>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a84      	ldr	r2, [pc, #528]	@ (80038f8 <HAL_SPI_Init+0x244>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d005      	beq.n	80036f6 <HAL_SPI_Init+0x42>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	d901      	bls.n	80036f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0f7      	b.n	80038e6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fd08 	bl	800410c <SPI_GetPacketSize>
 80036fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7b      	ldr	r2, [pc, #492]	@ (80038f0 <HAL_SPI_Init+0x23c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00c      	beq.n	8003722 <HAL_SPI_Init+0x6e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a79      	ldr	r2, [pc, #484]	@ (80038f4 <HAL_SPI_Init+0x240>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_SPI_Init+0x6e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a78      	ldr	r2, [pc, #480]	@ (80038f8 <HAL_SPI_Init+0x244>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d002      	beq.n	8003722 <HAL_SPI_Init+0x6e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d811      	bhi.n	8003746 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003726:	4a72      	ldr	r2, [pc, #456]	@ (80038f0 <HAL_SPI_Init+0x23c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a70      	ldr	r2, [pc, #448]	@ (80038f4 <HAL_SPI_Init+0x240>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_SPI_Init+0x8c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6f      	ldr	r2, [pc, #444]	@ (80038f8 <HAL_SPI_Init+0x244>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d104      	bne.n	800374a <HAL_SPI_Init+0x96>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b10      	cmp	r3, #16
 8003744:	d901      	bls.n	800374a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0cd      	b.n	80038e6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fc ff1c 	bl	800059c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003786:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003790:	d119      	bne.n	80037c6 <HAL_SPI_Init+0x112>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800379a:	d103      	bne.n	80037a4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10c      	bne.n	80037c6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80037b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037b4:	d107      	bne.n	80037c6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00f      	beq.n	80037f2 <HAL_SPI_Init+0x13e>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d90b      	bls.n	80037f2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e007      	b.n	8003802 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003800:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	431a      	orrs	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003814:	ea42 0103 	orr.w	r1, r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003862:	ea42 0103 	orr.w	r1, r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d113      	bne.n	80038a2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800388c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038a0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40013000 	.word	0x40013000
 80038f4:	40003800 	.word	0x40003800
 80038f8:	40003c00 	.word	0x40003c00

080038fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08e      	sub	sp, #56	@ 0x38
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3320      	adds	r3, #32
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3330      	adds	r3, #48	@ 0x30
 8003918:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	b29b      	uxth	r3, r3
 8003922:	3301      	adds	r3, #1
 8003924:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003926:	f7fd f855 	bl	80009d4 <HAL_GetTick>
 800392a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800392c:	887b      	ldrh	r3, [r7, #2]
 800392e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8003930:	887b      	ldrh	r3, [r7, #2]
 8003932:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
 8003942:	e310      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x5a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <HAL_SPI_TransmitReceive+0x5a>
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e305      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x6c>
 8003964:	2302      	movs	r3, #2
 8003966:	e2fe      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x66a>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2205      	movs	r2, #5
 8003974:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	887a      	ldrh	r2, [r7, #2]
 800398a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	887a      	ldrh	r2, [r7, #2]
 8003992:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80039c6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a70      	ldr	r2, [pc, #448]	@ (8003b90 <HAL_SPI_TransmitReceive+0x294>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_SPI_TransmitReceive+0xea>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003b94 <HAL_SPI_TransmitReceive+0x298>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_SPI_TransmitReceive+0xea>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a6d      	ldr	r2, [pc, #436]	@ (8003b98 <HAL_SPI_TransmitReceive+0x29c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80039e6:	2310      	movs	r3, #16
 80039e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ea:	e001      	b.n	80039f0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80039ec:	2308      	movs	r3, #8
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4b69      	ldr	r3, [pc, #420]	@ (8003b9c <HAL_SPI_TransmitReceive+0x2a0>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	8879      	ldrh	r1, [r7, #2]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a1c:	d107      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	f240 80a2 	bls.w	8003b7c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8003a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3a:	089b      	lsrs	r3, r3, #2
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003a3e:	e094      	b.n	8003b6a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d120      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x194>
 8003a4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01d      	beq.n	8003a90 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003a54:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003a56:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d217      	bcs.n	8003a90 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a70:	1d1a      	adds	r2, r3, #4
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003a8e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003a98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d065      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d118      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ab6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003abc:	1d1a      	adds	r2, r3, #4
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ada:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003adc:	e045      	b.n	8003b6a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8003ade:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003ae0:	8bfb      	ldrh	r3, [r7, #30]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d21d      	bcs.n	8003b22 <HAL_SPI_TransmitReceive+0x226>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d018      	beq.n	8003b22 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003af8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003afa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b00:	1d1a      	adds	r2, r3, #4
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003b1e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003b20:	e023      	b.n	8003b6a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b22:	f7fc ff57 	bl	80009d4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d803      	bhi.n	8003b3a <HAL_SPI_TransmitReceive+0x23e>
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d102      	bne.n	8003b40 <HAL_SPI_TransmitReceive+0x244>
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d114      	bne.n	8003b6a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fa15 	bl	8003f70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1fd      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003b6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f af67 	bne.w	8003a40 <HAL_SPI_TransmitReceive+0x144>
 8003b72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f47f af63 	bne.w	8003a40 <HAL_SPI_TransmitReceive+0x144>
 8003b7a:	e1ce      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b07      	cmp	r3, #7
 8003b82:	f240 81c2 	bls.w	8003f0a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8003b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003b8c:	e0c9      	b.n	8003d22 <HAL_SPI_TransmitReceive+0x426>
 8003b8e:	bf00      	nop
 8003b90:	40013000 	.word	0x40013000
 8003b94:	40003800 	.word	0x40003800
 8003b98:	40003c00 	.word	0x40003c00
 8003b9c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d11f      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x2f2>
 8003bae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01c      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003bb4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003bb6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d216      	bcs.n	8003bee <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc4:	881a      	ldrh	r2, [r3, #0]
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	1c9a      	adds	r2, r3, #2
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003bec:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003bf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8092 	beq.w	8003d22 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d118      	bne.n	8003c3e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	8812      	ldrh	r2, [r2, #0]
 8003c14:	b292      	uxth	r2, r2
 8003c16:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003c3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003c3c:	e071      	b.n	8003d22 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8003c3e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003c40:	8bfb      	ldrh	r3, [r7, #30]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d228      	bcs.n	8003c98 <HAL_SPI_TransmitReceive+0x39c>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d023      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	8812      	ldrh	r2, [r2, #0]
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c60:	1c9a      	adds	r2, r3, #2
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	8812      	ldrh	r2, [r2, #0]
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c76:	1c9a      	adds	r2, r3, #2
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b02      	subs	r3, #2
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003c94:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003c96:	e044      	b.n	8003d22 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8003c98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d11d      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x3de>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d018      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cac:	6a3a      	ldr	r2, [r7, #32]
 8003cae:	8812      	ldrh	r2, [r2, #0]
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cb8:	1c9a      	adds	r2, r3, #2
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003cd6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003cd8:	e023      	b.n	8003d22 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cda:	f7fc fe7b 	bl	80009d4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d803      	bhi.n	8003cf2 <HAL_SPI_TransmitReceive+0x3f6>
 8003cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d102      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x3fc>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d114      	bne.n	8003d22 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f939 	bl	8003f70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e121      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003d22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f af3b 	bne.w	8003ba0 <HAL_SPI_TransmitReceive+0x2a4>
 8003d2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f47f af37 	bne.w	8003ba0 <HAL_SPI_TransmitReceive+0x2a4>
 8003d32:	e0f2      	b.n	8003f1a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d121      	bne.n	8003d86 <HAL_SPI_TransmitReceive+0x48a>
 8003d42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01e      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003d48:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003d4a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d4e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d218      	bcs.n	8003d86 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3320      	adds	r3, #32
 8003d5e:	7812      	ldrb	r2, [r2, #0]
 8003d60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003d84:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003d8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80ba 	beq.w	8003f0a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d11b      	bne.n	8003ddc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003dd8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003dda:	e096      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8003ddc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003dde:	8bfb      	ldrh	r3, [r7, #30]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d24a      	bcs.n	8003e7a <HAL_SPI_TransmitReceive+0x57e>
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d045      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dfa:	7812      	ldrb	r2, [r2, #0]
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b04      	subs	r3, #4
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003e76:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003e78:	e047      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8003e7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d820      	bhi.n	8003ec2 <HAL_SPI_TransmitReceive+0x5c6>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01b      	beq.n	8003ec2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e96:	7812      	ldrb	r2, [r2, #0]
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ebe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003ec0:	e023      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec2:	f7fc fd87 	bl	80009d4 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d803      	bhi.n	8003eda <HAL_SPI_TransmitReceive+0x5de>
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_TransmitReceive+0x5e4>
 8003eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d114      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f845 	bl	8003f70 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e02d      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003f0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f af11 	bne.w	8003d34 <HAL_SPI_TransmitReceive+0x438>
 8003f12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f47f af0d 	bne.w	8003d34 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	2200      	movs	r2, #0
 8003f22:	2108      	movs	r1, #8
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f8c3 	bl	80040b0 <SPI_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f815 	bl	8003f70 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3730      	adds	r7, #48	@ 0x30
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop

08003f70 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0208 	orr.w	r2, r2, #8
 8003f8e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0210 	orr.w	r2, r2, #16
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0201 	bic.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6919      	ldr	r1, [r3, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b3c      	ldr	r3, [pc, #240]	@ (80040ac <SPI_CloseTransfer+0x13c>)
 8003fbc:	400b      	ands	r3, r1
 8003fbe:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003fce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d014      	beq.n	8004006 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00f      	beq.n	8004006 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699a      	ldr	r2, [r3, #24]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0220 	orr.w	r2, r2, #32
 8004004:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b03      	cmp	r3, #3
 8004010:	d014      	beq.n	800403c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00f      	beq.n	800403c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800403a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00f      	beq.n	8004066 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800404c:	f043 0201 	orr.w	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004064:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00f      	beq.n	8004090 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004076:	f043 0208 	orr.w	r2, r3, #8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800408e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	fffffc90 	.word	0xfffffc90

080040b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80040c0:	e010      	b.n	80040e4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c2:	f7fc fc87 	bl	80009d4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d803      	bhi.n	80040da <SPI_WaitOnFlagUntilTimeout+0x2a>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d102      	bne.n	80040e0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e00f      	b.n	8004104 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d0df      	beq.n	80040c2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3307      	adds	r3, #7
 800412a:	08db      	lsrs	r3, r3, #3
 800412c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	fb02 f303 	mul.w	r3, r2, r3
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <memset>:
 8004142:	4402      	add	r2, r0
 8004144:	4603      	mov	r3, r0
 8004146:	4293      	cmp	r3, r2
 8004148:	d100      	bne.n	800414c <memset+0xa>
 800414a:	4770      	bx	lr
 800414c:	f803 1b01 	strb.w	r1, [r3], #1
 8004150:	e7f9      	b.n	8004146 <memset+0x4>
	...

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4d0d      	ldr	r5, [pc, #52]	@ (800418c <__libc_init_array+0x38>)
 8004158:	4c0d      	ldr	r4, [pc, #52]	@ (8004190 <__libc_init_array+0x3c>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2600      	movs	r6, #0
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	4d0b      	ldr	r5, [pc, #44]	@ (8004194 <__libc_init_array+0x40>)
 8004166:	4c0c      	ldr	r4, [pc, #48]	@ (8004198 <__libc_init_array+0x44>)
 8004168:	f000 f818 	bl	800419c <_init>
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	2600      	movs	r6, #0
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	080041c4 	.word	0x080041c4
 8004190:	080041c4 	.word	0x080041c4
 8004194:	080041c4 	.word	0x080041c4
 8004198:	080041c8 	.word	0x080041c8

0800419c <_init>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr

080041a8 <_fini>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr
